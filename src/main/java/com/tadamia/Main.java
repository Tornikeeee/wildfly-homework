package com.tadamia;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class Main {
    public static final Logger lgg = LogManager.getLogger();

    public static void main(String[] args) {

    }
}

//დავალება 23.09.2022 (ჩაბარების ბოლო ვადა 26.09.2022 23:59)
//გადმოწერეთ Wildfly 17, გამართეთ, გაუშვით ვორდის დოკუმენტში აღწერილი  ინსტრუქციებით. დავალება უნდა დეფლოვდებოდეს და მუშაობდეს Wildfly-ზე  წარმატებულად.
//+++1. Wildfly-ს მოდულებში დაამატეთ rectangles.json და  triangles.xml ფაილები და
//+++ ხელით შეავსეთ 10 მართკუთხედით და 10 სამკუთხედით  შესაბამის სტრუქტურებში.
//++2. შექმენით ვებ პროექტი და მასში დაამატეთ  getRectangles სერვლეტი,
//++ რომელსაც გადაეცემა HTTP GET-ით queryString-ში p პერიმეტრი და rectangles.json-დან აბრუნებს ამ პერიმეტრის მქონე მართკუთხედების სიას JSON-ში.
//++ გამოიყენეთ Google-ს GSON ბიბლიოთეკა  scope=provided. rectangles.json ჩატვირთეთ ერთხელ მეხსიერებაში და თუ  ფაილი არ შეიცვალა,
// მისი შიგთავსი წაიკითხეთ მეხსიერებიდან, ხოლო თუ  შეიცვალა, მაშინ ფაილი ხელახლა უნდა ჩაიტვირთოს მეხსიერებაში   (კონფიგურაციის წაკითხვის ანალოგიურად).
//++3. დაამატეთ getMaxTriangle  სერვლეტი (არაფერი გადაეცემა) და GET-ით triangles.xml-დან დააბრუნებინეთ  მაქსიმალური პერიმეტრის მქონე სამკუთხედი XML-ში.
//++ გამოიყენეთ JAXB  ბიბლიოთეკა scope=provided. triangles.xml ჩატვირთეთ ერთხელ მეხსიერებაში  და თუ ფაილი არ შეიცვალა,
// მისი შიგთავსი წაიკითხეთ მეხსიერებიდან, ხოლო თუ  შეიცვალა, მაშინ ფაილი ხელახლა უნდა ჩაიტვირთოს მეხსიერებაში  (კონფიგურაციის წაკითხვის ანალოგიურად).
//4. პროექტს უნდა ჰქონდეს log4j2  ლოგირება (scope=compile), log4j2.xml ჩატვირთული wildfly-ს მოდულებში და  უნდა ლოგავდეს კოდის მნიშვნელოვან ეტაპებს.
// მაგალითად, როდესაც ახლიდან  ჩაიტვირთება rectangles.json და triangles.xml ფაილი.
//5. getMaxTriangle სერვლეტზე ასევე დაადეთ http basic ავტორიზაციის მოთხოვნა ახლად შექმნილი my_user/my_role-ით.
//6. ვებ აპლიკაციის დადეფლოვება მოახდინეთ როგორც ხელით, ისე ადმინ კონსოლითა და მავენის wildfly პლაგინით.
